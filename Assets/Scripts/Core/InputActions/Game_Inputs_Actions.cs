//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/ControlMap/Game_Inputs_Actions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace AfterHellFA.InputActions
{
    public partial class @GameInputActions : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @GameInputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Game_Inputs_Actions"",
    ""maps"": [
        {
            ""name"": ""NormalMode"",
            ""id"": ""08c45160-72f6-41ff-ba22-6fc99f0070f5"",
            ""actions"": [
                {
                    ""name"": ""MoveCamera"",
                    ""type"": ""Value"",
                    ""id"": ""c2fbc7a6-df0d-4fd6-8d8e-b9d16f251917"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RotateCamera"",
                    ""type"": ""Value"",
                    ""id"": ""14df858e-65e8-4c68-a26b-d0a3765c6e3b"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""IsDragCamera"",
                    ""type"": ""Button"",
                    ""id"": ""a331ef29-0014-44e1-965b-eaac6ac32a2c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DragCamera"",
                    ""type"": ""Value"",
                    ""id"": ""4265b1bd-1ccb-4abb-91a8-e844d1af7641"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ZoomCamera"",
                    ""type"": ""Value"",
                    ""id"": ""85a2fa8e-54d8-4241-b609-8290117059cc"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""2b907e11-102e-4d60-bc3a-52bbc29b7069"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c5639d3e-5104-41a4-8afa-9c62188bc9b1"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c50ae2c0-8bda-40bb-8a3a-40881712fe70"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8fac5503-227b-4057-9938-d166b36305a1"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ef958f6f-0e7e-4e13-8dfe-aef198b94e3b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""a622ee46-bcf8-4f2c-99a2-80f15bf133da"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateCamera"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""48c29ac3-35b8-4ad8-a885-1e66b6f3060f"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""075cee4c-96a6-4646-8c2a-65a4e1218663"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""42ce65e5-7dab-4327-a867-c48550601d6b"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""IsDragCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cd445cda-bbbf-4fab-98cd-7ca0e43259e0"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DragCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""48e3d003-a467-4404-b2f3-0b51b46f7ab1"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": ""Clamp(min=-1,max=1),Invert"",
                    ""groups"": """",
                    ""action"": ""ZoomCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""a1a9bbca-8ba0-4402-84d1-be1c097a9a42"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ZoomCamera"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""b5bdf0e6-7162-421d-aecb-4b8afca3cfa6"",
                    ""path"": ""<Keyboard>/numpadPlus"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ZoomCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""259f0d9b-b001-44e0-b890-247af45ed37b"",
                    ""path"": ""<Keyboard>/numpadMinus"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ZoomCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // NormalMode
            m_NormalMode = asset.FindActionMap("NormalMode", throwIfNotFound: true);
            m_NormalMode_MoveCamera = m_NormalMode.FindAction("MoveCamera", throwIfNotFound: true);
            m_NormalMode_RotateCamera = m_NormalMode.FindAction("RotateCamera", throwIfNotFound: true);
            m_NormalMode_IsDragCamera = m_NormalMode.FindAction("IsDragCamera", throwIfNotFound: true);
            m_NormalMode_DragCamera = m_NormalMode.FindAction("DragCamera", throwIfNotFound: true);
            m_NormalMode_ZoomCamera = m_NormalMode.FindAction("ZoomCamera", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // NormalMode
        private readonly InputActionMap m_NormalMode;
        private INormalModeActions m_NormalModeActionsCallbackInterface;
        private readonly InputAction m_NormalMode_MoveCamera;
        private readonly InputAction m_NormalMode_RotateCamera;
        private readonly InputAction m_NormalMode_IsDragCamera;
        private readonly InputAction m_NormalMode_DragCamera;
        private readonly InputAction m_NormalMode_ZoomCamera;
        public struct NormalModeActions
        {
            private @GameInputActions m_Wrapper;
            public NormalModeActions(@GameInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @MoveCamera => m_Wrapper.m_NormalMode_MoveCamera;
            public InputAction @RotateCamera => m_Wrapper.m_NormalMode_RotateCamera;
            public InputAction @IsDragCamera => m_Wrapper.m_NormalMode_IsDragCamera;
            public InputAction @DragCamera => m_Wrapper.m_NormalMode_DragCamera;
            public InputAction @ZoomCamera => m_Wrapper.m_NormalMode_ZoomCamera;
            public InputActionMap Get() { return m_Wrapper.m_NormalMode; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(NormalModeActions set) { return set.Get(); }
            public void SetCallbacks(INormalModeActions instance)
            {
                if (m_Wrapper.m_NormalModeActionsCallbackInterface != null)
                {
                    @MoveCamera.started -= m_Wrapper.m_NormalModeActionsCallbackInterface.OnMoveCamera;
                    @MoveCamera.performed -= m_Wrapper.m_NormalModeActionsCallbackInterface.OnMoveCamera;
                    @MoveCamera.canceled -= m_Wrapper.m_NormalModeActionsCallbackInterface.OnMoveCamera;
                    @RotateCamera.started -= m_Wrapper.m_NormalModeActionsCallbackInterface.OnRotateCamera;
                    @RotateCamera.performed -= m_Wrapper.m_NormalModeActionsCallbackInterface.OnRotateCamera;
                    @RotateCamera.canceled -= m_Wrapper.m_NormalModeActionsCallbackInterface.OnRotateCamera;
                    @IsDragCamera.started -= m_Wrapper.m_NormalModeActionsCallbackInterface.OnIsDragCamera;
                    @IsDragCamera.performed -= m_Wrapper.m_NormalModeActionsCallbackInterface.OnIsDragCamera;
                    @IsDragCamera.canceled -= m_Wrapper.m_NormalModeActionsCallbackInterface.OnIsDragCamera;
                    @DragCamera.started -= m_Wrapper.m_NormalModeActionsCallbackInterface.OnDragCamera;
                    @DragCamera.performed -= m_Wrapper.m_NormalModeActionsCallbackInterface.OnDragCamera;
                    @DragCamera.canceled -= m_Wrapper.m_NormalModeActionsCallbackInterface.OnDragCamera;
                    @ZoomCamera.started -= m_Wrapper.m_NormalModeActionsCallbackInterface.OnZoomCamera;
                    @ZoomCamera.performed -= m_Wrapper.m_NormalModeActionsCallbackInterface.OnZoomCamera;
                    @ZoomCamera.canceled -= m_Wrapper.m_NormalModeActionsCallbackInterface.OnZoomCamera;
                }
                m_Wrapper.m_NormalModeActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @MoveCamera.started += instance.OnMoveCamera;
                    @MoveCamera.performed += instance.OnMoveCamera;
                    @MoveCamera.canceled += instance.OnMoveCamera;
                    @RotateCamera.started += instance.OnRotateCamera;
                    @RotateCamera.performed += instance.OnRotateCamera;
                    @RotateCamera.canceled += instance.OnRotateCamera;
                    @IsDragCamera.started += instance.OnIsDragCamera;
                    @IsDragCamera.performed += instance.OnIsDragCamera;
                    @IsDragCamera.canceled += instance.OnIsDragCamera;
                    @DragCamera.started += instance.OnDragCamera;
                    @DragCamera.performed += instance.OnDragCamera;
                    @DragCamera.canceled += instance.OnDragCamera;
                    @ZoomCamera.started += instance.OnZoomCamera;
                    @ZoomCamera.performed += instance.OnZoomCamera;
                    @ZoomCamera.canceled += instance.OnZoomCamera;
                }
            }
        }
        public NormalModeActions @NormalMode => new NormalModeActions(this);
        public interface INormalModeActions
        {
            void OnMoveCamera(InputAction.CallbackContext context);
            void OnRotateCamera(InputAction.CallbackContext context);
            void OnIsDragCamera(InputAction.CallbackContext context);
            void OnDragCamera(InputAction.CallbackContext context);
            void OnZoomCamera(InputAction.CallbackContext context);
        }
    }
}
